'''
#=============================================================================
#     FileName: top_rank_v2.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Version: 0.0.1
#   LastChange: 2015-03-18 09:29:51
#      History:
#=============================================================================
'''
import sys
from getopt import getopt
from tools import report, load_des, load_predict

def main(argv=sys.argv):
    if len(argv) < 9:
        print """
OBJ
  to evaluate top-k accuracy

Usage
  %s [options]

[options]
  -k        int: estimate top-1 to top-K accuracy
  --pred   file: the one generated by gap_predict
  --som    file: each line should be `name\\tatom1\\tatom2...`
  --des    file: descriptors, same as input for gap_predict
  --delta float: if given, samples whose X is out of range
                 (<-delta or >1+delta) will not be considered.
 
Attention
  1. reports are based on SOMs involving only one atom:
     - considering all types of SOMs
     - exclude SOM type `6`(O-conjugation)
"""%argv[0]
        sys.exit(1)
    
    k = None
    pred_file = None
    som_file = None
    des_file = None
    delta = None
    options,args = getopt(argv[1:],'k:',['pred=','som=','des=','delta='])
    for opt,val in options:
        if opt == '-k':
            k = int(val)
        elif opt == '--pred':
            pred_file = val
        elif opt == '--som':
            som_file = val
        elif opt == '--des':
            des_file = val
        elif opt == '--delta':
            delta = float(val)
            assert delta >= 0
        else:
            print "Error: invalid option",opt
            sys.exit(1)
    assert len(args) == 0
    assert k is not None and pred_file is not None and som_file is not None and des_file is not None

    predict = load_predict(pred_file)  #key=name, value=[[site,y],...] which has been sorted
    print "totally %d samples being predicted with atom contributions"%len(predict.keys())
    des = load_des(des_file,predict.keys(),delta)   #key=mol_name, value=[(atom,type),...]
    print "totally %d samples being loaded from %s"%(len(des.keys()), des_file)
    actual_all,actual_no6 = load_som(som_file,des)      #key=name, value=[site1,site2,...]
    print "len(actual_all.keys()):",len(actual_all.keys())
    print "len(actual_no6.keys()):",len(actual_no6.keys())

    print "===report considering all types of SOMs except those with more than one atoms==="
    report(actual_all, predict, k)
    print "\n===report excluding SOM type 6 (O-conjugation) and more than one atoms==="
    report(actual_no6, predict, k)


def valid(actual,atom):
    for a,t in actual:
        if a==atom and t=='6':
            return False
    return True

def load_som(infile,des):
    actual_all = {}
    actual_no6 = {}
    inf = open(infile,'r')
    for line in inf:
        line = line.strip().split("\t")
        if not des.has_key(line[0]):
            continue
        actual_all[line[0]] = []
        actual_no6[line[0]] = []
        for atom in line[1:]:
            if "-" in atom:
                continue
            actual_all[line[0]].append(atom)
            if valid(des[line[0]],atom):
                actual_no6[line[0]].append(atom)
    inf.close()
    return actual_all,actual_no6


main()



