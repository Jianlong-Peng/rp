'''
#=============================================================================
#     FileName: vis_result.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Version: 0.0.1
#   LastChange: 2015-03-11 11:02:52
#      History:
#=============================================================================
'''
import sys
from rdkit import Chem
from rdkit.Chem import AllChem


def main(argv=sys.argv):
	if len(argv) not in (4,5):
		print """
OBJ
  to generate HTML to visualize CLint and atom contribution

Usage
  %s mol predict out.html [name]

Argument
  mol     : file, which is used to be predicted
            mol, sdf, or mol2
  predict : file, generated by gap_predict
  out.html: file, to save the generated HTML file
  [name]  : str, if it's given, only generate HTML file
            for the structure specified by [name].
            only valid for .sdf file. (by default: 1st)

"""%argv[0]
		sys.exit(1)
	
	if len(argv) == 5:
		name = argv[4]
	else:
		name = ""

	mol = load_structure(argv[1],name)
	contrib,cl = load_contribution(argv[2],name)   #[(atom,contrib),...]
	create_html(mol,contrib,cl,argv[3])


def load_structure(infile, name=""):
	_format = infile[infile.rfind(".")+1:]
	if _format.lower == "mol":
		mol = Chem.MolFromMolFile(infile)
	elif _format.lower() == "sdf":
		found = False
		for mol in Chem.SDMolSupplier(infile):
			if mol is None: continue
			if name=="" or mol.GetProp("_Name")==name:
				found = True
				break
		if not found:
			if name == "":
				print "Error: there is no structure in",infile
			else:
				print "Error: failed to find %s from %s"%(name,infile)
			sys.exit(1)
	elif _format.lower() == "mol2":
		mol = Chem.MolFromMol2File(infile)
	else:
		print "Error: invalid format %s"%_format
		sys.exit(1)
	
	if mol is None:
		print "Error: failed to load structure from",infile
		sys.exit(1)
	
	return mol

def load_contribution(infile, name=""):
	inf = open(infile,'r')
	contrib = []   #[(atom,contrib),...]
	cl = ""
	for line in inf:
		line = line.split()
		temp = line[0].split("\\")[-1]
		temp = temp[:temp.rfind(".")]
		if name=="" or temp==name:
			cl = line[1]
			if ":" in line[2]:
				j = 2
			else:
				j = 3
			for item in line[j:]:
				atom,val = item.split(":")
				contrib.append((atom,float(val)))
			break
	inf.close()

	if len(contrib) == 0:
		print "Error: failed to load contribtion from",infile
		sys.exit(1)
	
	contrib.sort(key=lambda x: x[1], reverse=True)
	
	return contrib,cl

def create_html(mol,contrib,cl,outfile):
	AllChem.Compute2DCoords(mol)
	atom_table = ""
	for atom,val in contrib:
		atom_table += """
	<tr align="center">
		<td id="atom_%s"><a href="#" onclick="highlight_atom('%s'); return false;">%s.%s&nbsp;&nbsp;&nbsp%s</a></td>
	</tr>
		"""%(atom, atom, mol.GetAtomWithIdx(int(atom)-1).GetSymbol(), atom, val)

	top3 = """
	document.getElementById("atom_%s").setAttribute("bgcolor","#fad25a");  // 2
	document.getElementById("atom_%s").setAttribute("bgcolor","#e1c3e6");  // 6
	document.getElementById("atom_%s").setAttribute("bgcolor","#a2ece0");  // 4
	"""%(contrib[0][0],contrib[1][0],contrib[2][0])
	top3_col = "%s,2,%s,6,%s,4"%(contrib[0][0],contrib[1][0],contrib[2][0])
#		atom_table += """
#	<tr>
#		<td><a href="#" onclick="highlight_atom('%s'); return false;">%s.%s</a></td>
#		<td>%s</td>
#	</tr>"""%(atom, mol.GetAtomWithIdx(int(atom)-1).GetSymbol(), atom, val)

	outf = open(outfile,'w')
	print >>outf, """
<!doctype html>
<html>
<head>
	<script type="text/javascript" src="http://202.127.19.75:8080/ADMET_Predictor/jsme/jsme.nocache.js"></script>
	<style type="text/css">
		a:link {text-decoration: none; color: black}
		a:visited {text-decoration: none; color: green}
		a:hover {text-decoration: underline; color: red}
		a:active {text-decoration: blink}
	</style>
	<script type="text/javascript" language="javascript">
		function jsmeOnLoad() {
			jsmeApplet = new JSApplet.JSME("structure", "340px", "380px", {
				"options": "query,removehs,depict"
			});
			jsmeApplet.readMolFile("%s");
			jsmeApplet.setAtomBackgroundColors(1,"%s");  // highlight for top-3 atoms
			var rows = document.getElementById("whole_table").rows;
			for(var i=0; i<rows.length; i++) {
				for(var j=0; j<rows[i].cells.length; j++) {
					var cell = rows[i].cells[j];
					cell.setAttribute("bgcolor","white");
				}
			}
			%s
		}
		var last_atom = "";
		function highlight_atom(atom) {
			jsmeApplet.resetAtomColors(1);
			jsmeApplet.setAtomBackgroundColors(1,"%s,"+atom+",1");
			if(last_atom != "") {
				document.getElementById("atom_"+last_atom).setAttribute("bgcolor","white");
				%s
			}
			last_atom = atom;
			document.getElementById("atom_"+atom).setAttribute("bgcolor","#ff9999");   // 1
		}
	</script>
</head>
<body>
<table border="1" cellspacing="3" id="whole_table" bgcolor="white">
	<tr>
		<td colspan="2" align="center"><b>CL<sub>H,int</sub> = %s</b></td>
	</tr>
	<tr>
		<td rowspan="%d"><div id="structure"></div></td>
	</tr>
	<tr>
		<!--
		<td><b>atom</b>&nbsp;&nbsp;&nbsp;&nbsp;</td>
		<td><b>contribution</b>&nbsp;&nbsp</td>
		-->
		<td align="center">&nbsp;&nbsp;&nbsp;<b>atom contribution</b>&nbsp;&nbsp;&nbsp;</td>
	</tr>
	%s
</table>
<p><b>Attention</b></br>
1. both CL<sub>H,int</sub> and values in `atom contribution` column is log<sub>10</sub> transformed;</br>
2. the atoms in top-3 are automatically highlighted.</br>
3. you can click the corresponding cell in `atom contribution` column to highlight atoms.</br>
</p>
</body>
</html>
"""%(Chem.MolToMolBlock(mol).replace("\n","\\n"), top3_col, top3, top3_col, top3, cl, len(contrib)+2, atom_table)
	outf.close()

main()

