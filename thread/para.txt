
#type of ga algorithm  (default: 2)
# 1:GASimpleGA, 2:GASteadyStateGA
#ga_type 2

gapara_file  gapara.txt

#- 1  
#  Initialization - for each molecule, randomly initialize [0.,1.], followed by normalization
#  Mutation       - for each molecule, randomly pick two atoms, delta=GARandomFloat(0., min{v1,v2,1-v1,1-v2}), then v1+/-delta, v2+/-delta
#  crossover      - gene block of molecule i is either from mom or dad
#- 2  
#  Initialization - for each molecule, randomly initialize [0.5,1.] for SOM and [0.,0.5] for no-SOM, followed by normalization
#  Mutation       - for each molecule, randomly pick two atoms, deltea=GARandomFloat(0., min{v1,v2,1-v1,1-v2}), then
#                   if both are SOM or no-SOM, then v1+/-delta, v2+/-delta equally
#                   otherwise, the SOM has more probability(0.7) being v+delta
#  crossover      - gene block of molecule i is either from mom or dad
#Attention:
#- for operator_type=2, `train_som` must be given.
operator_type 2


#1  -  1/mean(RSS)
#2  -  1/mean(RSS) + mean(sum(xij^2)),  where xij is atom contribution of atom j of molecule i
#3  -  1/mean(RSS) + mean(AUC(xi)),  where AUC(xi) to estimate whether the atom contribution is compatible to experimentally observed SOMs
#4  -  1/mean(RSS) + mean(sum(xij^2)) + mean(AUC(xi))
#5  -  1/mean(RSS) + mean(IAP)
#Attention: for type 3 and 4, `train_som` must be specified.
#           obj function 2 and 4 are no longer supported!!!!!!
#obj_type 1
#
#obj_type should be a string of length <=4
#fitness will be 1/mean(RSS) + wauc * mean(AUC(xi)) + mean(IAP) + belta * {1/mean(consistency)} + wx2 * mean{sum_j{x_ij^2}}
#where, belta = [1,10]
#obj_type[0]: mean(AUC(xi)),  where AUC(xi) to estimate whether the atom contribution is compatible to experimentally observed SOMs
#obj_type[1]: mean(IAP)
#obj_type[2]: 1/mean(consistency), where consistency = mean((predict_atom_contribution - partititon)^2)
#obj_type[3]: mean(sum_j{x_ij^2}},  to estimate the distribution of a molecule's atom contribution
#therefore, if obj_type=1000, then fitness = 1/mean(RSS) + mean(AUC)
obj_type 0110

belta 1

wx2 1

wauc 1

#if do_log == 0, then models will be trained based on y instead of log10(y)
do_log 1


#frequency to output ga population
freq_flush 50

# do 5-fold Cross-validation {repeat} times
repeat 30

# multi-thread mode
nthread 10

#number of independent variables for each type of SOMs
#num_xs  20 20 20 20 11 20 14

#0 - RBF (default)
#1 - tanimoto-like
#                  X'Y
#    K(X,Y) = -------------
#              X^2+Y^2-X'Y
#2 - MinMax-kernel
#              \sum{min{Xi,Yi}}
#    K(X,Y) = -------------------
#              \sum{max{Xi,Yi}}
kernel_type 0

#descriptors of training set
#y-values have been transformed by log10()
train_des  /home/simmluo/users/jlpeng/clearance/20141101/train

#SOMs of training set (optional)
#if given, larger value will be assigned for atoms actaully metabolized
train_som  /home/simmluo/users/jlpeng/clearance/dataset/sites_of_metabolism_train.txt

#file to save best partition of clearance
#by default: atom contribution of clearance is in the form of log10()
output  train.partition

#seed 12345678
