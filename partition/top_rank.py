'''
#=============================================================================
#     FileName: top_rank.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Version: 0.0.1
#   LastChange: 2015-03-09 01:54:13
#      History:
#=============================================================================
'''
import sys


def main(argv=sys.argv):
	if len(argv) != 4:
		print """
OBJ
  to evaluate top-k accuracy

Usage
  %s k predict som

Arguments
  k      : int, estimate top-1 to top-K accuracy
  predict: file, generated by gap_predict
  som    : file, som file.
"""%argv[0]
		sys.exit(1)
	
	k = int(argv[1])
	predict = load_predict(argv[2])  #key=name, value=[[site,y],...] which has been sorted
	actual  = load_som(argv[3])      #key=name, value=[site1,site2,...]
	results = []
	for i in xrange(1,k+1):
		total,miss,right = estimate(actual, predict, i)
		results.append((i,right,total-miss-right))
	print "\ntotally %d samples, of which %d has no SOM labeled"%(total,miss)
	print "k  right error accuracy"
	for i,right,error in results:
		print "%-2d %-5d %-5d %-g"%(i,right,error,1.*right/(right+error))
	print ""

def load_predict(infile):
	predict = {}
	inf = open(infile,'r')
	for line in inf:
		line = line.split()
		name = line[0].split("\\")[-1].split(".")[0]
		values = []
		if ":" in line[2]:
			i = 2
		else:
			i = 3
		for j in xrange(i,len(line)):
			idx,val = line[j].split(":")
			values.append((idx,float(val)))
		values.sort(key=lambda x:x[1], reverse=True)
		predict[name] = values
	inf.close()
	return predict

def load_som(infile):
	actual = {}
	inf = open(infile,'r')
	line = inf.readline()
	for line in inf:
		line = line.split()
		actual[line[0]] = line[3:]
	inf.close()
	return actual

def estimate(actual, predict, k):
	total = 0
	miss  = 0    #there is no SOM labeled
	right = 0
	for name in actual.keys():
		total += 1
		if len(actual[name]) == 0:
			miss += 1
			continue
		pred_values = predict[name]
		found = False
		for site,y in pred_values[:k]:
			if site in actual[name]:
				found = True
		if found:
			right += 1
	return total,miss,right

main()



